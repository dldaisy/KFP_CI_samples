node {
    def pipeline_id="3def2908-1d36-4bc4-a00e-56e5477b031c"

    // build hello-world image
    stage("BuildImages"){
        // step1: specify source
        scm = checkout([$class: 'GitSCM', branches: [[name: '*/master']], userRemoteConfigs: [[url: 'http://github.com/dldaisy/jenkins_test.git']]])
        imagename = "helloworld-ci:$scm.GIT_COMMIT"
        // build image
        sh "docker build -t $imagename ./helloworld/"
    }


    // package pipeline
    stage("PackagePipeline"){
        withPythonEnv('python3'){
            sh '''
            pip3 install cffi==1.12.3 --upgrade;
            pip3 install https://storage.googleapis.com/jingzhangjz-kfp/kfp-0.1.23.tar.gz;
            python pipeline.py --commit_id $scm.GIT_COMMIT;
            '''
        }
    }
    // upload pipeline to some storage so that it can be accessed by kubeflow pipeline CreatePipelineVersion API
    // in this example, we set up a local http server to expose jenkins workspace to kfp API
    stage("UploadPipeline"){
        //copy pipeline.py.zip to a storage without access control
        sh"""
        gsutil cp ./pipeline.py.zip gs://test-pipeline-version/$scm.GIT_COMMIT/pipeline.zip
        """
    }

    // create pipeline version and a new run
    stage("CreatePipelineVersionAndRun"){
        def version_name = "jenkins-ci-$scm.GIT_COMMIT"
        def run_name = "$scm.GIT_COMMIT-run"
        

        data = sh(script: """echo '{"name": "$version_name", "code_source_url": "https://github.com/dldaisy/jenkins_test.git/tree/$scm.GIT_COMMIT", "package_url": {"pipeline_url": "https://storage.googleapis.com/test-pipeline-version/$scm.GIT_COMMIT/pipeline.zip"}, "resource_references": [{"key": {"id": "$pipeline_id", "type":3}, "relationship":1}]}';""", returnStdout: true).trim()
        //echo "data is: $data"
        version=sh(script: """curl -H "Content-Type: application/json" -X POST -d '$data' http://34.70.82.171:8888/apis/v1beta1/pipeline_versions | jq -r ".id";""", returnStdout: true).trim()
        // version=sh(script: """curl -H "Content-Type: application/json" -X POST -d '$data' http://34.70.82.171:8888/apis/v1beta1/pipeline_versions;""", returnStdout: true)
        rundata=sh(script: """echo '{"name": "$run_name", "resource_references": [{"key": {"id": "$version", "type":4}, "relationship":2}, {"key": {"id": "d5a136ac-f931-4d05-8c4c-97851a4ebd6b", "type":1}, "relationship": 1}]}';""", returnStdout: true).trim()
        //echo "run data is: $rundata"
        sh(script: """curl -H "Content-Type: application/json" -X POST -d '$rundata' http://34.70.82.171:8888/apis/v1beta1/runs""")
        
    }
}